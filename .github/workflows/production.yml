name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10.12]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: myappdb
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: your_access_key
          MINIO_ROOT_PASSWORD: your_secret_key
        ports:
          - 9000:9000
        options: --entrypoint ""

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Minio Bucket
        run: |
          python -c "import boto3; client = boto3.client('s3', endpoint_url='http://localhost:9000', aws_access_key_id='your_access_key', aws_secret_access_key='your_secret_key'); bucket_name = 'profile-pictures'; \
          try: client.head_bucket(Bucket=bucket_name); print(f'Bucket {bucket_name} already exists.'); \
          except client.exceptions.NoSuchBucket: print(f'Creating bucket {bucket_name}...'); client.create_bucket(Bucket=bucket_name)"

      - name: Run tests with Pytest
        env:
          DATABASE_URL: postgresql+asyncpg://user:password@localhost:5432/myappdb
          MINIO_ENDPOINT: http://localhost:9000
          MINIO_ACCESS_KEY: your_access_key
          MINIO_SECRET_KEY: your_secret_key
          MINIO_BUCKET_NAME: profile-pictures
          MINIO_SECURE: false
        run: pytest

  build-and-push-docker:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: kaw393939/wis_club_api:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=kaw393939/wis_club_api:cache
          cache-to: type=inline,mode=max
          
      - name: Scan the Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'kaw393939/wis_club_api:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
